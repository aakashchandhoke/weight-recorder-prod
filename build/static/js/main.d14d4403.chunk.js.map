{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","Layout","Footer","Content","Title","Typography","App","state","graphData","getDataFromXLSX","axios","get","then","res","setState","data","map","item","weight","parseFloat","console","log","catch","e","message","error","this","tailLayout","wrapperCol","offset","span","config","xField","yField","smooth","point","label","style","fill","legend","position","autoFit","textAlign","color","background","height","marginLeft","marginRight","justify","xs","sm","md","lg","xl","title","marginTop","labelCol","name","initialValues","remember","onFinish","values","sno","length","date","moment","format","post","success","onFinishFailed","errorInfo","padding","Item","rules","required","placeholder","width","type","htmlType","backgroundColor","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d14d4403.chunk.js","sourcesContent":["import React from 'react';\nimport { Line } from '@ant-design/charts';\nimport { Layout, Typography, Col, Card, Row, DatePicker, Button, Form, InputNumber, message } from 'antd';\nimport './App.css';\nimport 'antd/dist/antd.css'\nimport moment from 'moment';\nimport axios from 'axios'\n\nconst { Header, Footer, Content } = Layout;\nconst { Title } = Typography;\n\nclass App extends React.Component {\n  state = {\n    graphData: [],\n  }\n\n  getDataFromXLSX = () => {\n    axios.get(\"http://localhost:5000/get-worksheet\").then(res => {\n      this.setState({\n        graphData: res.data.data.map(item => {\n          item.weight = parseFloat(item.weight)\n          return item;\n        })\n      });\n      console.log(this.state.graphData)\n    }).catch(e => message.error(e.message));\n  }\n\n  componentDidMount() {\n    this.getDataFromXLSX();\n  }\n\n  render() {\n    const layout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 16 },\n    };\n    const tailLayout = {\n      wrapperCol: { offset: 10, span: 14 },\n    };\n\n    const onFinish = values => {\n      let data = {\n        sno: this.state.graphData.length + 1,\n        date: moment(values.date).format(\"YYYY-MM-DD\"),\n        weight: values.weight\n      }\n      axios.post(\"http://localhost:5000/add-weight\", data).then(res => {\n        message.success(\"Data added successfully\");\n        this.getDataFromXLSX();\n      }).catch(e => message.error(e.message))\n    };\n\n    const onFinishFailed = errorInfo => {\n      console.log('Failed:', errorInfo);\n    };\n\n    const config = {\n      data: this.state.graphData,\n      xField: 'date',\n      yField: 'weight',\n      smooth: true,\n      point: {},\n      label: {\n        style: {\n          fill: '#aaa',\n        },\n      },\n      legend: { position: 'top' },\n      autoFit: true,\n    };\n    return (\n      <Layout>\n        <Header><Title style={{ textAlign: \"center\", color: \"#FFF\" }}><i>Weight Calculator</i></Title></Header>\n        <Content style={{ background: '#fff', height: \"85vh\", marginLeft: 20, marginRight: 20 }}>\n          <Row justify=\"center\">\n            <Col xs={18} sm={18} md={18} lg={18} xl={18}>\n              <Card title=\"Enter Details\" style={{ marginTop: 50 }}>\n                <Form\n                  {...layout}\n                  name=\"basic\"\n                  initialValues={{ remember: true }}\n                  onFinish={onFinish}\n                  onFinishFailed={onFinishFailed}\n                  style={{ padding: 20 }}\n                >\n                  <Form.Item\n                    label=\"Date\"\n                    name=\"date\"\n                    rules={[{ required: true, message: 'Please input the date!' }]}\n                  >\n                    <DatePicker placeholder=\"Enter Date\" style={{ width: \"100%\" }} />\n                  </Form.Item>\n\n                  <Form.Item\n                    label=\"Weight\"\n                    name=\"weight\"\n                    rules={[{ required: true, message: 'Please input your weight!' }]}\n                  >\n                    <InputNumber style={{ width: \"100%\" }} placeholder=\"Enter Weight\" />\n                  </Form.Item>\n\n                  <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                      Submit\n                    </Button>\n                  </Form.Item>\n                </Form>\n              </Card>\n            </Col>\n          </Row>\n          <Row justify=\"center\">\n            <Col xs={18} sm={18} md={18} lg={18} xl={18} >\n              <Card title=\"Date vs Weight Graph\" style={{ marginTop: 20 }}>\n                < Line {...config} style={{ height: \"30vh\" }} />\n              </Card>\n            </Col>\n          </Row>\n        </Content>\n        <Footer style={{ textAlign: \"center\", backgroundColor: \"#cfd9e3\" }}>\n          Site Design  <b>Â©2020</b> Created by <b><i>Aakash Chandhoke, Member (Research Staff), Central Research Laboratory, Bharat\n                Electronics Limited, Ghaziabad</i></b>\n        </Footer>\n      </Layout>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}